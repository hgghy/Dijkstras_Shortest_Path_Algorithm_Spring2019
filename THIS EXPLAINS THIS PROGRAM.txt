
Sorry about the weird filename, but I wanted to make sure that this got read.

This program is a demonstration of an edge-vertex graph and Dijkstra's shortest path algorithm.
It prompts the user to enter any number of edges (vertices are inferred therefrom) and their weights.
After any number of such entries, it outputs a list containing the shortest path to each vertex.
It also can also be run based on hardcoded data or randomly generated data. Just change the method call in main.java.

The program was written as a weekly assignment in spring 2019.
This is not the original repository, because that one has a confusing name on orders from the professor 
to whom the project was submitted.
I have edited it to simplify some code, refactor, and add comments. Functionality has not been changed.

The program is not truly object oriented in that the edges & vertices don't actually have objects that link to one another.
As a result, complexity is O(n^2) with no optimizations and performance suffers. At 10000 edges, it takes about 5 seconds to run. 
At 30000 edges, it takes about 1 minute to run. Any graph with a large number of edges may take a long time to run.